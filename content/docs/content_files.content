<!-- Main -->
<section id="main" class="wrapper style2">
	<div class="title">Content Files</div>
	<div class="container">
		<!-- Features -->
		<section id="features">
			<header class="style1">
				<h2>Guide to writing content files</h2>
			</header>

			<!-- Image -->
			<center>
				<img src="@pathtofile(site/images/rabbit-icon.svg)" alt="Nift bunny mascot" width=300 style="margin-bottom:40px">
			</center>

			<div class="content">
				<h4>
					Introduction
				</h4>

				<p>
					Nift has its own powerful template language which you can use in amongst any other scripting/programming/template language you want, making it even more powerful. This page outlines most of the template language with a few additional parts explained on the <a href="@pathto(docs/template_files)">template files</a> page. 
				</p>

				<a href="#contents" class="to_top">[contents]</a>

				<p id="contents">
					The following functions available in Nift's template language are documented on this page:
					<ul style="text-indent:30px">
						<li><a href="#functions">About functions</a></li>
						<li><a href="#escape-chars">Escape characters</a></li>
						<li><a href="#newlines">Newlines</a></li>
						<li><a href="#comments">Comments</a></li>
						<li><a href="#input-file-info">Inputting file information</a></li>
						<li><a href="#input-project-info">Inputting project information</a></li>
						<li><a href="#input-os-info">Inputting operating system information</a></li>
						<li><a href="#input-date-time-tz-info">Inputting date, time & timezone information</a></li>
						<li><a href="#string-vars">String variables</a></li>
						<li><a href="#input-from-file">Inputting text from other files</a></li>
						<li><a href="#input-raw-from-file">Inputting raw text from other files</a></li>
						<li><a href="#paths-between-files">Paths from output files to other (tracked) files</a></li>
						<li><a href="#file-deps">Adding file dependencies</a></li>
						<li><a href="#scripts">Running scripts</a></li>
						<li><a href="#script-output">Inputting script output</a></li>
						<li><a href="#script-output-raw">Inputting script output raw</a></li>
						<li><a href="#system">Running system calls</a></li>
						<li><a href="#system-output">Inputting system call output</a></li>
						<li><a href="#system-output-raw">Inputting system call output raw</a></li>
						<li><a href="#user-input">User input from command-line</a></li>
						<li><a href="#user-file-input">User input from file</a></li>
						<li><a href="#entities">Character entities</a></li>
						<li><a href="#css-files">Including css files</a></li>
						<li><a href="#img-files">Including image files</a></li>
						<li><a href="#js-files">Including javascript files</a></li>
						<li><a href="#favicon-file">Including a favicon file</a></li>
					</ul>
				</p>

				<h4 id="functions">
					About functions
				</h4>
				<p>
					Some of the functions take input parameters, if you would like to use the template language with the input parameters for a function call then put <mono>*</mono> without any whitespace between the function name and parentheses containing the input parameters. For example:
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline">
\@input*("\@[contentpath]")
</pre>
</div>
				</p>

				<p>
					<b>Note:</b> For parameters (including variable names and values), you can use:
					<ul>
						<li><mono>\n</mono> for the newline character</li>
						<li><mono>\t</mono> for tabs (though normal tabs also work)</li>
						<li><mono>\\</mono> for <mono>\</mono></li>
						<li><mono>\'</mono> for <mono>'</mono></li>
						<li><mono>\"</mono> for <mono>"</mono></li>
					</ul>
				</p>

				<p>
					Parameters (including variable names and values) can be unquoted, single quoted or double quoted, whichever is more convenient, integrates with the other programming/scripting/template languages you are using and/or has nice syntax highlighting with the extensions and editor(s) you are using. Also for functions that can take multiple parameters, parameters containing commas <mono>','</mono> should be quoted, there can also be other times that things need to be quoted, for example if you want to have equals <mono>'='</mono> in a variable name during its definition then it will need to be quoted (though will not need to be quoted when referenced). 
				</p>

				<h4 id="escape-chars">
					Escape characters
				</h4>
				<p>
					The escape character options with <mono>Nift</mono> are listed in the table below. There used to be more escape characters for Nift however they conflicted with Nift's goals to both work for more than just websites and integrate with as many different programming/scripting/template languages as possible. See the <a href="#ent">character entity</a> section of this page for the new way to easily get (html) entities of different characters.
				</p>

				<p>
					<center>
						<table id="escape_character_table" class="alt" style="text-align: center">
							<thead>
								<tr>
									<th>syntax</th>
									<th>quoted output</th>
								</tr>
							</thead>
							<tr>
								<td>\\@</td> @# \@ is faster than @
								<td><mono>"\@"</mono></td>
							</tr>
							<tr>
								<td>\@\\</td> 
								<td><mono>"@\\"</mono></td>
							</tr>
							<tr>
								<td>\@\t</td> 
								<td><mono>*<i>tab</i>*</mono></td>
							</tr>
							<tr>
								<td>\@\n</td> 
								<td><mono>*<i>newline</i>*</mono></td>
							</tr>
							<tr>
								<td>\@\\@</td> @# \@ is faster than @
								<td><mono>"&amp;commat;"</mono></td>
							</tr>
							<tr>
								<td>\@\<</td> 
								<td><mono>"&amp;lt;"</mono></td>
							</tr>
							<tfoot>
								<tr>
									<th>syntax</th>
									<th>quoted output</th>
								</tr>
							</tfoot>
						</table>
					</center>
				</p>

				<h4 id="newlines">
					Newlines
				</h4>
				
				<p>
					You can break up one line in the source code of content/templates files in to multiple lines in the source code for the build page/file using <mono>\@\n</mono>. For example if you have the following in one of your content files used to build an output file:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline">
This is a line \@\nthat is broken in to\@\n three lines.
</pre>
</div>
				</p>

				<p>
					Then the built output file will have the following written to it when it reaches that point in the build process:
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline">
This is a line @\nthat is broken in to@\n three lines.
</pre>
</div>
				</p>

				<h4 id="comments">
					Comments
				</h4>

				<p>
					If you are building <mono>html</mono> or <mono>php</mono> pages with Nift then you can use <mono>html</mono> or <mono>php</mono> coments in your content and template files which will also appear in the source code for the built pages. If you are building output files of another language with Nift, you should also have no problems using the comment syntax for that language in your content and template files which will appear in the source code for the built output files. The following syntax is available for comments that will be stripped and not appear in the source code for built output files:

					<center>
						<table id="comments_syntax_table" class="alt">
							<thead>
								<tr>
									<th>type</th>
									<th>syntax</th>
								</tr>
							</thead>
							<tr>
								<td>raw single-line comment</td>
								<td><mono>\@# <i>comment-text</i></mono></td>
							</tr>
							<tr>
								<td>parsed single-line comment</td>
								<td><mono>\@// <i>comment-text</i></mono></td>
							</tr>
							<tr>
								<td>special parsed single-line comment</td>
								<td><mono>\@!\n <i>comment-text</i></mono></td>
							</tr>
							<tr>
								<td>raw multi-line comment</td>
								<td><mono><\@-- <i>comment-text</i> --\@></mono></td>
							</tr>
							<tr>
								<td>parsed multi-line comment</td>
								<td><mono>\@/* <i>comment-text</i> \@*/</mono></td>
							</tr>
							<tr>
								<td>special parsed multi-line comment</td>
								<td>
									<mono>
										\@---<br>
										<i>comment-text</i><br>
										\@---
									</mono>
								</td>
							</tr>
							<tfoot>
								<tr>
									<th>type</th>
									<th>syntax</th>
								</tr>
							</tfoot>
						</table>
					</center>
				</p>

				<p>
					The syntax for Nift comments should be reasonably easy to remember as it is very close to the comment syntax people will be used to from languages like html, php, javascript, css, bash, python, C/C++, etc.. It also has the added benefit of being easy to turn comments from those languages in to Nift comments, and being easy to turn back again.
				</p>

				<p>
					<u>Raw vs. Parsed:</u> Parsed comments have the comment text parsed with Nift's template language, so for example string definitions would be recognised, whereas raw comments do <u>not</u> have the comment text parsed with Nift's template language. 
				</p>

				<p>
					<u>Special parsed single-line comments</u> are almost the same as parsed single-line comments except that in the source code for the built output file the following line is placed on the same line after the text before <mono>\@!\n</mono>. You cannot put two instances of <mono>\@!\n</mono> on the same line, Nift will throw a build error.
				</p>

				<p>
					With raw and parsed multi-line comments, even if you comment out entire lines the built output file will still have one empty line where the comment was. This is where <u>special parsed multi-line comments</u> come in to play, if you use them then the source code for the built outputfile will not have any blank line where the comment was in the content or template file. 
				</p>

				<p>
					<b>Note:</b> While you can open and close raw and parsed multi-line comments anywhere on a line, including opening and closing on the same line, special parsed multi-line comments are for commenting out sections of entire lines. The open and close tags should each be on individual lines without even any leading/trailing whitespace. 
				</p>

				<h4 id="input-file-info">
					Inputting file information
				</h4>
				<p>
					The following information about the output file being built can be injected:

					<center>
						<table id="file_info_syntax_table" class="alt">
							<thead>
								<tr>
									<th>type</th>
									<th>syntax</th>
								</tr>
							</thead>
							<tr>
								<td>name</td>
								<td><mono>\@[name]</mono></td>
							</tr>
							<tr>
								<td>title</td>
								<td><mono>\@[title]</mono></td>
							</tr>
							<tr>
								<td>output file path</td>
								<td><mono>\@[outputpath]</mono></td>
							</tr>
							<tr>
								<td>output extension</td>
								<td><mono>\@[outputext]</mono></td>
							</tr>
							<tr>
								<td>content file path</td>
								<td><mono>\@[contentpath]</mono></td>
							</tr>
							<tr>
								<td>content extension</td>
								<td><mono>\@[contentext]</mono></td>
							</tr>
							<tr>
								<td>script extension</td>
								<td><mono>\@[scriptext]</mono></td>
							</tr>
							<tr>
								<td>template path</td>
								<td><mono>\@[templatepath]</mono></td>
							</tr>
							<tfoot>
								<tr>
									<th>type</th>
									<th>syntax</th>
								</tr>
							</tfoot>
						</table>
					</center>

					For example in a file <mono>template/head.content</mono> you may want something along the lines of <mono>@\<title>sitename - \@[title]@\</title></mono>.
				</p>

				<h4 id="input-project-info">
					Inputting project information
				</h4>
				<p>
					The following information about the project <mono>Nift</mono> is managing can be injected:

					<center>
						<table id="project_info_syntax_table" class="alt">
							<thead>
								<tr>
									<th>type</th>
									<th>syntax</th>
								</tr>
							</thead>
							<tr>
								<td>content directory</td>
								<td><mono>\@[contentdir]</mono></td>
							</tr>
							<tr>
								<td>output directory</td>
								<td><mono>\@[outputdir]</mono></td>
							</tr>
							<tr>
								<td>default content extension</td>
								<td><mono>\@[defaultcontentext]</mono></td>
							</tr>
							<tr>
								<td>default output extension</td>
								<td><mono>\@[defaultoutputext]</mono></td>
							</tr>
							<tr>
								<td>default script extension</td>
								<td><mono>\@[defaultscriptext]</mono></td>
							</tr>
							<tr>
								<td>default template</td>
								<td><mono>\@[defaulttemplate]</mono></td>
							</tr>
							<tfoot>
								<tr>
									<th>type</th>
									<th>syntax</th>
								</tr>
							</tfoot>
						</table>
					</center>
				</p>

				<h4 id="input-os-info">
					Inputting operating system information
				</h4>
				<p>
					You can use <mono>\@buildOS</mono> to add whether an output file was built using <mono>Nift</mono> on Linux, Macintosh or Windows (<mono>\@currentOS</mono> will continue to do the same for backwards compatibility purposes). 
				</p>

				<h4 id="input-date-time-tz-info">
					Inputting date, time and timezone information
				</h4>
				<p>
					The date and time that an output file was built may be inputted using <mono>\@builddate</mono> and <mono>\@buildtime</mono> (<mono>\@currentdate</mono> and <mono>\@currenttime</mono> will continue to do the same for backwards compatibility purposes). The timezone this date and time information is associated with may also be inputted using <mono>\@buildtimezone</mono> (<mono>\@timezone</mono> will continue to do the same for backwards compatibility purposes).
				</p>

				<p>
					The date and time that an output file was loaded in a web browser may be inputted using <mono>\@loaddate</mono> and <mono>\@loadtime</mono>. The timezone this date and time information is associated with (ie. where the user is browsing the internet from) may also be inputted using <mono>\@loadtimezone</mono>.
				</p>

				<p>
					Also available are <mono>\@buildUTCtime</mono>, <mono>\@buildUTCdate</mono>, <mono>\@buildYY</mono> and <mono>\@buildYYYY</mono> (with <mono>\@currentUTCtime</mono>, <mono>\@currentUTCdate</mono>, <mono>\@currentYY</mono> and <mono>\@currentYYYY</mono> doing the same for backwards compatibility purposes), along with <mono>\@loadUTCtime</mono>, <mono>\@loadUTCdate</mono>, <mono>\@loadYY</mono> and <mono>\@loadYYYY</mono>.
				</p>

				<h4 id="string-vars">
					String variables
				</h4>
				<p>
					You can define string variables using <mono>\@:=(string, <i>var1-name</i> = <i>var1-value</i>, &hellip;, <i>varN-name</i> = <i>varN-value</i>)</mono>, where <mono><i>vari-name</i></mono> is the name of varible <mono>i</mono> and <mono><i>vari-value</i></mono> is the value for variable <mono>i</mono>. Note that you do not have to assign a value to any/all of the variables. For example you might have:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline lang-bash">
\@:=(string, str = "hello, world!", str2)
</pre>
</div>
				</p>

				<p>
					<b>Note:</b> variable types and variable values containing commas <mono>','</mono> should be quoted, variable names containing commas <mono>','</mono> or the equals character <mono>'='</mono> should be quoted.
				</p>

				<p>
					You can reference string variables using <mono>\@[<i>varName</i>]</mono> or <mono>\@{<i>varName</i>}</mono>, where <mono><i>varName</i></mono> is the variable name. Use whichever is more convenient, integrates with the other programming/scripting/template languages you are using and/or has nice syntax highlighting with the extensions and editor(s) you are using. For example with markdown files, using <mono>[]</mono> non-nested often gives nice highlighting. With nesting use a combination of <mono>[]</mono> and <mono>{}</mono> with whichever resulting highlighting you prefer. Also you may want to avoid using <mono>{}</mono> for example if your output files are using the handlebars or mustache template languages. 
				</p>

				<p>
					For example to reference the string <mono>str</mono> defined above use:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline lang-bash">
\@[str]
</pre>
</div>
				</p>

				<h4 id="input-from-file">
					Inputting text from other files
				</h4>
				<p>
					Text may be inputted from another file using <mono>\@input(path-to-file)</mono>, where <mono>path-to-file</mono> is the path from the main project directory to the input file.
				</p>

				<p>
					For example suppose inside a project directory you have <mono>template/footer.content</mono>:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline lang-bash">
Page was last built on \@currentdate.
</pre>
</div>
				</p>

				<p>
					To input <mono>template/footer.content</mono> into another file write:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline">
\@input("template/footer.content")
</pre>
</div>
				</p>

				<p>
					<u>Note:</u> <mono>Nift</mono> will not let you create an input loop, for example you cannot have <mono>\@input(page.template)</mono> inside <mono>page.template</mono>, or any of the files that <mono>page.template</mono> inputs, or any of the files that they input, and so on. 
				</p>

				<h4 id="input-raw-from-file">
					Inputting raw text from other files
				</h4>
				<p>
					Raw text (so not parsed with Nift's template language) may be inputted from another file using <mono>\@inputraw(path-to-file)</mono>, where <mono>path-to-file</mono> is the path from the main project directory to the input file.
				</p>

				<p>
					For example suppose inside your project directory you have <mono>template/footer.content</mono>.
				</p>

				<p>
					To raw input <mono>template/footer.content</mono> into another file write:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline">
\@inputraw("template/footer.content")
</pre>
</div>
				</p>

				<h4 id="paths-between-files">
					Paths from output files to other (tracked) files
				</h4>

				<p>
					It is possible for tracked files $A$ and $B$ to be located in distinct directories yet input text from the same content file $X$. Consequently if content file $X$ contains a path to another file $Y$, you have the problem that the path from $A$ to $Y$ is not the same as the path from $B$ to $Y$. You can solve this non-constant path problem by using <mono>\@pathto(name)</mono> or <mono>\@pathtopage(name)</mono> where <mono>name</mono> is the tracked name for $Y$. When building an output file, <mono>Nift</mono> will replace <mono>\@pathto(name)</mono> with the relative path from the output file being built to the output file for $Y$.
				</p>

				<p>
					An example of when users may find this useful is when writing menus for website page templates, or adding in text for the head/header/footer/etc.. An example of a menu using <mono>\@pathto(name)</mono> is below:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint linenums">
<nav>
	<ul class="drop_menu">
		<li></li>
		<li class="dm_li">
			<a href="\@pathto(index)">Home</a>
		</li>

		<li class ="dm_li">
			<div class="dm_text">Documentation</div>
			<ul class ="drop_submenu">
				<li class="dsm_li"><a href="\@pathto(documentation/installing_nift)">Installing Nift</a></li>
				<li class="dsm_li"><a href="\@pathto(documentation/nift_tutorial)">Nift tutorial</a></li>
				<li class="dsm_li"><a href="\@pathto(documentation/nift_commands)">Nift commands</a></li>
			</ul>
		</li>

		<li class ="dm_li">
			<a href="\@pathto(support)">Support</a>
		</li>
		<li></li>
	</ul>
</nav>
</pre>
</div>
				</p>

				<p>
					When using <mono>\@pathto(name)</mono> or <mono>\@pathtopage(name)</mono>, <mono>Nift</mono> will throw an error if <mono>name</mono> is not being tracked by <mono>Nift</mono>. You can solve the non-constant path problem for arbitrary files by using <mono>\@pathtofile(path-to-file)</mono> where <mono>path-to-file</mono> is the absolute path from the project root directory to file $Y$ (where tracked file $Y$ above has been replaced with file $Y$). When building an output file, <mono>Nift</mono> will throw an error if the file does not exist and otherwise inject the relative path from the built output file to file $Y$. 
				</p>

				<p>
					An example footer content file (inputted in the <mono>template/page.template</mono> file) is given below as an example using <mono>\@pathtofile(path-to-file)</mono>:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint linenums">
<footer>
	<hr>
	<center><img src="\@pathtofile(site/files/nsm.png)" width="120"></center>

	<p>
		<b>Mirrors:</b> [<a href="https://nift.cc/">Official</a>] [<a href="https://nifty-site-manager.bitbucket.io/">BitBucket</a>] [<a href="https://nifty-site-manager.github.io/">GitHub</a>] [<a href="https://nifty-site-manager.gitlab.io/">GitLab</a>]
	</p>

	<p>
		<b>Repos:</b> [<a href="https://bitbucket.org/nifty-site-manager/nsm/src/master/">BitBucket</a>] [<a href="https://github.com/nifty-site-manager/nsm">GitHub</a>] [<a href="https://gitlab.com/nifty-site-manager/nsm">GitLab</a>]
	</p>

	Page was last built on \@currentdate at \@currenttime (\@timezone) using \@currentOS. <br>

	<noselect><small>&copy;&nbsp;2015-\@loadYY <a href="https://n-ham.com/">Nicholas Ham</a></small></noselect>
</footer>
</pre>
</div>
				</p>

				<h4 id="file-deps">Adding file dependencies</h4>
				<p>
					File dependencies may be added using <mono>\@dep(dep-path)</mono>, where <mono>dep-path</mono> is the path from the project root directory to the dependency file.
				</p>

				<p>
					You can also add file dependencies manually by adding a <mono>.deps</mono> file residing in the same directory as the content file. For example if you have <mono>content/index.content</mono> as the content file add a <mono>content/index.deps</mono> file containing the extra dependencies you want to track. 
				</p>


				<h4 id="scripts">Running scripts</h4>
				<p>
					Scripts may be run using <mono>\@script(script-path)</mono>, where <mono>script-path</mono> is the path from the project root directory to the script, which is basically the same as the system call for the script. If you need to pass parameters to your scripts you can use <mono>\@script(script-path, script-parameters)</mono> where <mono>script-parameters</mono> is a quoted string of parameters (use single outer quotes and double inner quotes for parameters with spaces).
				</p>

				<p>
					For example if you want to run a script <mono>'script.py'</mono>, you can do so with:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline lang-bash">
\@script('./script.py')
</pre>
</div>
				</p>

				<p>
					Also if for example you want to run a script <mono>'script.py'</mono> while passing in the parameters <mono>"light blue"</mono> and <mono>red</mono>, you can do so with:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline lang-bash">
\@script('./script.py', '"light blue" red')
</pre>
</div>
				</p>

				<p>
					<b>Note:</b> you can use <mono>\'</mono> for <mono>'</mono> and <mono>\"</mono> for <mono>"</mono> in script paths and parameter strings. 
				</p>

				<p>
					<b>Note:</b> Scripts/programs run with <mono>\@script</mono> calls are moved to the project root directory to run and have a backup copy made. If scripts/programs are so large that copying the file will take time, or you are making lots of calls which is slower at scale, you can use the <mono>'^'</mono> option to not have the script backed up, eg.: 
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline lang-bash">
\@script^('./script.py')
</pre>
</div>
				</p>

				<p>
					If you need to use Nift's template language with the input parameters for the <mono>\@script</mono> call as well then you can do either <mono>\@script*^(script-path)</mono> or <mono>\@script^*(script-path)</mono>.
				</p>

				<p>
					Alternatively you can write scripts/programs that you run yourself (not using Nift) which they themselves add the Nift build process in to them, leaving you with just one program that you need to run when building. You will still get to take advantage of Nift's unbeaten build times and powerful template language doing this.
				</p>

				<p>
					<b>Note:</b> If you need to have different files/threads running the same script during the build process you will either need to set the number of build threads to <mono>1</mono> or put up with having to rebuild on the occassions where Nift unsuccessfully tries to run both scripts at the same time. You can always have duplicate copies of the same script in different files and have each file/thread run a different version.
				</p>

				<p>
					<b>Note:</b> Scripts and system calls are run from the project root directory so all paths in your scripts should start from there. Also do not change directory in your scripts as it will mess up the other threads that are also building output files (this is an unfortunate limitation of C++). If you really must change directories in your scripts then you can take a reduction in build times and set the number of build threads to 1, make sure to change back to the project root directory before each script ends. Also you will not see the output of your scripts until after they have finished running, so user input is not recommended as you can not display a message (this should be fixed soon).
				</p>

				<p>
					<b>Note:</b> <mono>\@script</mono> calls do not scale very well to hundreds of thousands of calls, it is much better to combine as much as possible in to as few <mono>\@script</mono> calls as possible for extremely large projects (moving stuff to the pre/post build scripts is the best place, you can output stuff to file and process the files when building). For example if possible it's much faster to have a few pre-build scripts to download text from multiple urls using cURL, and/or make all the api calls, all the database queries, and work on JSON data needed and distribute the needed output in to different files to be inputted when needed. Note that file-specific build scripts have the benefit of multithreading, whereas project-wide build scripts wont have any multithreading unless you code it in there yourself.
				</p>

				<h4 id="script-output">Inputting script output</h4>
				<p>
					Output from scripts may be inputted at any point when building output files using <mono>\@scriptoutput(script-path)</mono>, where where <mono>script-path</mono> is the path from the main project directory to the script, which is basically the same as the system call for the script. If you need to pass parameters to your scripts you can use <mono>\@scriptoutput(script-path, script-parameters)</mono> where <mono>script-parameters</mono> is a quoted string of parameters (use single outer quotes and double inner quotes for parameters with spaces). This can be incredibly useful for things like conditional statements/loops, or integrating with databases, GraphQL and scripting languages etc., which is just the tip of the ice berg!
				</p>

				<p>
					For example suppose you want to input the output from running a script <mono>"linux script.py"</mono>, you can do so with:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline">
\@scriptoutput('./linux script.py')
</pre>
</div>

				<p>
					<b>Note:</b> you can use <mono>\'</mono> for <mono>'</mono> and <mono>\"</mono> for <mono>"</mono> in script paths and parameter strings. 
				</p>

				<p>
					<b>Note:</b> Scripts/programs run with <mono>\@scriptoutput</mono> calls are moved to the project root directory to run and have a backup copy made. If scripts/programs are so large that copying the file will take time, or you are making lots of calls which is slower at scale, you can use the <mono>'^'</mono> option to not have the script backed up, eg.: 
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline lang-bash">
\@scriptoutput^('./script.py')
</pre>
</div>
				</p>

				<p>
					If you need to use Nift's template language with the input parameters for the <mono>\@scriptoutput</mono> call as well then you can do either <mono>\@scriptoutput*^(script-path)</mono> or <mono>\@scriptoutput^*(script-path)</mono>.
				</p>

				<p>
					Alternatively you can write scripts/programs that you run yourself (not using Nift) which they themselves add the Nift build process in to them, leaving you with just one program that you need to run when building. You will still get to take advantage of Nift's unbeaten build times and powerful template language doing this.
				</p>

				<p>
					<b>Note:</b> If you need to have different files/threads running the same script during the build process you will either need to set the number of build threads to <mono>1</mono> or put up with having to rebuild on the occassions where Nift unsuccessfully tries to run both scripts at the same time. You can always have duplicate copies of the same script in different files and have each file/thread run a different version.
				</p>

				<p>
					<b>Note:</b> Scripts and system calls are run from the project root directory so all paths in your scripts should start from there. Also do not change directory in your scripts as it will mess up the other threads that are also building output files. If you really must change directories in your scripts then you will have to set the number of build threads to 1 and change back to the project root directory before each script ends. Also you will not see the output of your scripts until after they have finished running, so user input is not recommended as you can not display a message (this should be fixed soon).
				</p>

				<p>
					<b>Note:</b> <mono>\@scriptoutput</mono> calls do not scale very well to hundreds of thousands of calls, it is much better to combine as much as possible in to as few <mono>\@script</mono> calls as possible for extremely large projects (moving stuff to the pre/post build scripts is the best place, you can output stuff to file and process the files when building). For example if possible it's much faster to have a few pre-build scripts to download text from multiple urls using cURL, and/or make all the api calls, all the database queries, and work on JSON data needed and distribute the needed output in to different files to be inputted when needed. Note that file-specific build scripts have the benefit of multithreading, whereas project-wide build scripts wont have any multithreading unless you code it in there yourself.
				</p>

				<h4 id="script-output-raw">Inputting script output raw</h4>
				<p>
					Raw output from scripts (so not parsed with Nift's template language) may be inputted at any point when building output files using <mono>\@scriptraw(script-path)</mono>, where where <mono>script-path</mono> is the path from the main project directory to the script, which is basically the same as the systemraw call for the script. If you need to pass parameters to your scripts you can use <mono>\@scriptraw(script-path, script-parameters)</mono> where <mono>script-parameters</mono> is a quoted string of parameters (use single outer quotes and double inner quotes for parameters with spaces).

				<p>
					For example suppose you want to input the raw output from running a script <mono>"linux script.py"</mono>, you can do so with:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline">
\@scriptraw('./linux script.py')
</pre>
</div>

				<p>
					<b>Note:</b> you can use <mono>\'</mono> for <mono>'</mono> and <mono>\"</mono> for <mono>"</mono> in script paths and parameter strings. 
				</p>

				<p>
					<b>Note:</b> Scripts/programs run with <mono>\@scriptraw</mono> calls are moved to the project root directory to run and have a backup copy made. If scripts/programs are so large that copying the file will take time, or you are making lots of calls which is slower at scale, you can use the <mono>'^'</mono> option to not have the script backed up, eg.: 
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline lang-bash">
\@scriptraw^('./script.py')
</pre>
</div>
				</p>

				<p>
					If you need to use Nift's template language with the input parameters for the <mono>\@scriptraw</mono> call as well then you can do either <mono>\@scriptraw*^(script-path)</mono> or <mono>\@scriptraw^*(script-path)</mono>.
				</p>

				<p>
					Alternatively you can write scripts/programs that you run yourself (not using Nift) which they themselves add the Nift build process in to them, leaving you with just one program that you need to run when building. You will still get to take advantage of Nift's unbeaten build times and powerful template language doing this.
				</p>

				<p>
					<b>Note:</b> If you need to have different files/threads running the same script during the build process you will either need to set the number of build threads to <mono>1</mono> or put up with having to rebuild on the occassions where Nift unsuccessfully tries to run both scripts at the same time. You can always have duplicate copies of the same script in different files and have each file/thread run a different version.
				</p>

				<p>
					<b>Note:</b> Scripts and system calls are run from the project root directory so all paths in your scripts should start from there. Also do not change directory in your scripts as it will mess up the other threads that are also building output files. If you really must change directories in your scripts then you will have to set the number of build threads to 1 and change back to the project root directory before each script ends. Also you will not see the output of your scripts until after they have finished running, so user input is not recommended as you can not display a message (this should be fixed soon).
				</p>

				<p>
					<b>Note:</b> <mono>\@scriptraw</mono> calls do not scale very well to hundreds of thousands of calls, it is much better to combine as much as possible in to as few <mono>\@script</mono> calls as possible for extremely large projects (moving stuff to the pre/post build scripts is the best place, you can output stuff to file and process the files when building). For example if possible it's much faster to have a few pre-build scripts to download text from multiple urls using cURL, and/or make all the api calls, all the database queries, and work on JSON data needed and distribute the needed output in to different files to be inputted when needed. Note that file-specific build scripts have the benefit of multithreading, whereas project-wide build scripts wont have any multithreading unless you code it in there yourself.
				</p>

				<h4 id="system">Running system calls</h4>
				<p>
					System calls may be run using <mono>\@system(system-call)</mono>, where <mono>system-call</mono> is the system call or you want to run. 
				</p>

				<p>
					For example suppose you want to convert the markdown file <mono>file.md</mono> to html using pandoc and save it in <mono>out.html</mono>, you can do so with:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline">
\@system('pandoc -o out.html file.md')
</pre>
</div>

				<p>
					<b>Note:</b> you can use <mono>\'</mono> for <mono>'</mono> and <mono>\"</mono> for <mono>"</mono> in system-calls. 
				</p>

				<p>
					<b>Note:</b> Scripts and system calls are run from the project root directory so all paths in your scripts should start from there. Also do not change directory in your scripts as it will mess up the other threads that are also building output files. If you really must change directories in your scripts then you will have to set the number of build threads to 1 and change back to the project root directory before each script ends. Also you will not see the output of your scripts until after they have finished running, so user input is not recommended as you can not display a message.
				</p>

				<p>
					<b>Note:</b> <mono>\@system</mono> calls do not scale very well to hundreds of thousands of calls, it is much better to combine as much as possible in to as few <mono>\@script</mono> calls as possible for extremely large projects (moving stuff to the pre/post build scripts is the best place, you can output stuff to file and process the files when building). For example if possible it's much faster to have a few pre-build scripts to download text from multiple urls using cURL, and/or make all the api calls, all the database queries, and work on JSON data needed and distribute the needed output in to different files to be inputted when needed. Note that file-specific build scripts have the benefit of multithreading, whereas project-wide build scripts wont have any multithreading unless you code it in there yourself.
				</p>

				<h4 id="system-output">Inputting system call output</h4>
				<p>
					Output from system calls may be inputted at any point when building output files using <mono>\@systemoutput(system-call)</mono>, where <mono>system-call</mono> is the system call or script you want to run. This can be incredibly useful for things like conditional statements/loops, inputting text from a url using cURL, or integrating with databases, GraphQL and scripting languages etc., which is just the tip of the ice berg!
				</p>

				<p>
					<b>Note:</b> you can use <mono>\'</mono> for <mono>'</mono> and <mono>\"</mono> for <mono>"</mono> in system-calls. 
				</p>

				<p>
					<b>Note:</b> Scripts and system calls are run from the project root directory so all paths in your scripts should start from there. Also do not change directory in your scripts as it will mess up the other threads that are also building output files. If you really must change directories in your scripts then you will have to set the number of build threads to 1 and change back to the project root directory before each script ends. Also you will not see the output of your scripts until after they have finished running, so user input is not recommended as you can not display a message.
				</p>

				<p>
					<b>Note:</b> <mono>\@systemoutput</mono> calls do not scale very well to hundreds of thousands of calls, it is much better to combine as much as possible in to as few <mono>\@script</mono> calls as possible for extremely large projects (moving stuff to the pre/post build scripts is the best place, you can output stuff to file and process the files when building). For example if possible it's much faster to have a few pre-build scripts to download text from multiple urls using cURL, and/or make all the api calls, all the database queries, and work on JSON data needed and distribute the needed output in to different files to be inputted when needed. Note that file-specific build scripts have the benefit of multithreading, whereas project-wide build scripts wont have any multithreading unless you code it in there yourself.
				</p>

				<p>
					For example suppose you want to input the text from <a href="https://pastebin.com/atjKuxY6">this</a> paste on <a href="https://pastebin.com">Paste Bin</a>, you can do so with:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline">
\@systemoutput("curl -sS https://pastebin.com/raw/atjKuxY6")
</pre>
</div>
				</p>

				<h4 id="system-output-raw">Inputting system call output raw</h4>
				<p>
					Raw output from system calls may be inputted at any point when building output files using <mono>\@systemraw(system-call)</mono>, where <mono>system-call</mono> is the system call or script you want to run.
				</p>

				<p>
					<b>Note:</b> you can use <mono>\'</mono> for <mono>'</mono> and <mono>\"</mono> for <mono>"</mono> in system-calls. 
				</p>

				<p>
					<b>Note:</b> Scripts and system calls are run from the project root directory so all paths in your scripts should start from there. Also do not change directory in your scripts as it will mess up the other threads that are also building output files. If you really must change directories in your scripts then you will have to set the number of build threads to 1 and change back to the project root directory before each script ends. Also you will not see the output of your scripts until after they have finished running, so user input is not recommended as you can not display a message.
				</p>

				<p>
					<b>Note:</b> <mono>\@systemraw</mono> calls do not scale very well to hundreds of thousands of calls, it is much better to combine as much as possible in to as few <mono>\@script</mono> calls as possible for extremely large projects (moving stuff to the pre/post build scripts is the best place, you can output stuff to file and process the files when building). For example if possible it's much faster to have a few pre-build scripts to download text from multiple urls using cURL, and/or make all the api calls, all the database queries, and work on JSON data needed and distribute the needed output in to different files to be inputted when needed. Note that file-specific build scripts have the benefit of multithreading, whereas project-wide build scripts wont have any multithreading unless you code it in there yourself.
				</p>

				<p>
					For example suppose you want to input the text from <a href="https://pastebin.com/atjKuxY6">this</a> paste on <a href="https://pastebin.com">Paste Bin</a>, you can do so with:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline">
\@systemraw("curl -sS https://pastebin.com/raw/atjKuxY6")
</pre>
</div>
				</p>

				<h4 id="user-input">
					User input from command-line
				</h4>
				<p>
					To inject standard input from the user using the command-line in to the output file being built you can use <mono>\@userin(message)</mono> where <mono>message</mono> is the message to be displayed on the command-line to the user.
				</p>

				<p>
					For example:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint lang-js inline">
\@userin("please enter your name:")
</pre>
</div>
				</p>

				<p>
					You can even input the message from file if you would like using <mono>\@userin*(\@input(message-file-path))</mono>, for example:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint lang-js inline">
\@userin*(\@input*("\@[contentdir]/input-message.txt"))
</pre>
</div>
				</p>

				<h4 id="user-file-input">
					User input from file
				</h4>
				<p>
					To inject input from the user from a file in to the output file being built you can use <mono>\@userfilein(message)</mono> where <mono>message</mono> is the message/template to be displayed in the file opened up for the user to modify then save/close.
				</p>

				<p>
					<b>Note:</b> you can choose which text editor is used with the <mono>unixTextEditor</mono> and <mono>winTextEditor</mono> settings in the <mono>.nsm/nift.config</mono> configuration file in your project directory.
				</p>

				<p>
					For example:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint lang-js inline">
\@userfilein("please replace this text with your content")
</pre>
</div>
				</p>

				<p>
					You can even input the message from file if you would like using <mono>\@userfilein*(\@input(message-file-path))</mono>, for example:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint lang-js inline">
\@userfilein*(\@input*("\@[contentdir]/input-message.txt"))
</pre>
</div>
				</p>

				<p>
					<b>Note:</b> If you want to input the message/template from file without it being parsed by Nift's template language yet use <mono>\@inputraw(path-to-file)</mono> rather than <mono>\@input(path-to-file)</mono>.
				</p>

				<h4 id="entities">
					Character entities
				</h4>
				<p>
					You can get the (html) entity for many characters using <mono>\@ent(code)</mono> where <mono>code</mono> is the code for the entity you want. The entities currently available with Nift are in the table below.
				</p>

				<p>
					<center>
						<table id="escape_character_table" class="alt" style="text-align: center">
							<thead>
								<tr>
									<th>code</th>
									<th>output</th>
									<th>rendered</th>
								</tr>
							</thead>
							<tr>
								<td>\@ent('`')</td> 
								<td>&amp;grave;</td>
								<td>@ent('`')</td>
							</tr>
							<tr>
								<td>\@ent('~')</td> 
								<td>&amp;tilde;</td>
								<td>@ent('~')</td>
							</tr>
							<tr>
								<td>\@ent('!')</td> 
								<td>&amp;excl;</td>
								<td>@ent('!')</td>
							</tr>
							<tr>
								<td>\@ent('@')</td> 
								<td>&amp;commat;</td>
								<td>@ent('@')</td>
							</tr>
							<tr>
								<td>\@ent('#')</td> 
								<td>&amp;num;</td>
								<td>@ent('#')</td>
							</tr>
							<tr>
								<td>\@ent('$')</td> 
								<td>&amp;dollar;</td>
								<td>@ent('$')</td>
							</tr>
							<tr>
								<td>\@ent('%')</td> 
								<td>&amp;percnt;</td>
								<td>@ent('%')</td>
							</tr>
							<tr>
								<td>\@ent('^')</td> 
								<td>&amp;Hat;</td>
								<td>@ent('^')</td>
							</tr>
							<tr>
								<td>\@ent('&')</td> 
								<td>&amp;amp;</td>
								<td>@ent('&')</td>
							</tr>
							<tr>
								<td>\@ent('*')</td> 
								<td>&amp;ast;</td>
								<td>@ent('*')</td>
							</tr>
							<tr>
								<td>\@ent('?')</td> 
								<td>&amp;quest;</td>
								<td>@ent('?')</td>
							</tr>
							<tr>
								<td>\@ent('<')</td> 
								<td>&amp;lt;</td>
								<td>@ent('<')</td>
							</tr>
							<tr>
								<td>\@ent('>')</td> 
								<td>&amp;gt;</td>
								<td>@ent('>')</td>
							</tr>
							<tr>
								<td>\@ent('(')</td> 
								<td>&amp;lpar;</td>
								<td>@ent('(')</td>
							</tr>
							<tr>
								<td>\@ent(')')</td> 
								<td>&amp;rpar;</td>
								<td>@ent(')')</td>
							</tr>
							<tr>
								<td>\@ent('[')</td> 
								<td>&amp;lbrack;</td>
								<td>@ent('`')</td>
							</tr>
							<tr>
								<td>\@ent(']')</td> 
								<td>&amp;rbrack;</td>
								<td>@ent(']')</td>
							</tr>
							<tr>
								<td>\@ent('{')</td> 
								<td>&amp;lbrace;</td>
								<td>@ent('{')</td>
							</tr>
							<tr>
								<td>\@ent('}')</td> 
								<td>&amp;rbrace;</td>
								<td>@ent('}')</td>
							</tr>
							<tr>
								<td>\@ent('-')</td> 
								<td>&amp;minus;</td>
								<td>@ent('-')</td>
							</tr>
							<tr>
								<td>\@ent('_')</td> 
								<td>&amp;lowbar;</td>
								<td>@ent('_')</td>
							</tr>
							<tr>
								<td>\@ent('=')</td> 
								<td>&amp;equals;</td>
								<td>@ent('=')</td>
							</tr>
							<tr>
								<td>\@ent('+')</td> 
								<td>&amp;plus;</td>
								<td>@ent('+')</td>
							</tr>
							<tr>
								<td>\@ent('|')</td> 
								<td>&amp;vert;</td>
								<td>@ent('|')</td>
							</tr>
							<tr>
								<td>\@ent('\\')</td> 
								<td>&amp;bsol;</td>
								<td>@ent('\\')</td>
							</tr>
							<tr>
								<td>\@ent('/')</td> 
								<td>&amp;sol;</td>
								<td>@ent('/')</td>
							</tr>
							<tr>
								<td>\@ent(';')</td> 
								<td>&amp;semi;</td>
								<td>@ent(';')</td>
							</tr>
							<tr>
								<td>\@ent(':')</td> 
								<td>&amp;colon;</td>
								<td>@ent(':')</td>
							</tr>
							<tr>
								<td>\@ent('\'')</td> 
								<td>&amp;apos;</td>
								<td>@ent('\'')</td>
							</tr>
							<tr>
								<td>\@ent('"')</td> 
								<td>&amp;quot;</td>
								<td>@ent('"')</td>
							</tr>
							<tr>
								<td>\@ent(',')</td> 
								<td>&amp;comma;</td>
								<td>@ent(',')</td>
							</tr>
							<tr>
								<td>\@ent('.')</td> 
								<td>&amp;period;</td>
								<td>@ent('.')</td>
							</tr>
							<tr>
								<td>\@ent('£')</td> 
								<td>&amp;pound;</td>
								<td>@ent('£')</td>
							</tr>
							<tr>
								<td>\@ent('¥')</td> 
								<td>&amp;yen;</td>
								<td>@ent('¥')</td>
							</tr>
							<tr>
								<td>\@ent('€')</td> 
								<td>&amp;euro;</td>
								<td>@ent('€')</td>
							</tr>
							<tr>
								<td>\@ent("section")</td> 
								<td>&amp;sect;</td>
								<td>@ent('§')</td>
							</tr>
							<tr>
								<td>\@ent("+-")</td> 
								<td>&amp;pm;</td>
								<td>@ent('+-')</td>
							</tr>
							<tr>
								<td>\@ent("-+")</td> 
								<td>&amp;mp;</td>
								<td>@ent('-+')</td>
							</tr>
							<tr>
								<td>\@ent("!=")</td> 
								<td>&amp;ne;</td>
								<td>@ent('!=')</td>
							</tr>
							<tr>
								<td>\@ent("<=")</td> 
								<td>&amp;leq;</td>
								<td>@ent('<=')</td>
							</tr>
							<tr>
								<td>\@ent(">=")</td> 
								<td>&amp;geq;</td>
								<td>@ent('>=')</td>
							</tr>
							<tr>
								<td>\@ent("->")</td> 
								<td>&amp;rarr;</td>
								<td>@ent("->")</td>
							</tr>
								<tr>
								<td>\@ent("@\<-")</td> 
								<td>&amp;larr;</td>
								<td>@ent("<-")</td>
							</tr>
							<tr>
								<td>\@ent("@\<->")</td> 
								<td>&amp;harr;</td>
								<td>@ent("<->")</td>
							</tr>
							<tr>
								<td>\@ent("==>")</td> 
								<td>&amp;rArr;</td>
								<td>@ent("==>")</td>
							</tr>
							<tr>
								<td>\@ent("@\<==")</td> 
								<td>&amp;lArr;</td>
								<td>@ent("<==")</td>
							</tr>
							<tr>
								<td>\@ent("@\<==>")</td> 
								<td>&amp;hArr;</td>
								<td>@ent("<==>")</td>
							</tr>
							<tr>
								<td>\@ent("<=!=>")</td> 
								<td>&amp;nhArr;</td>
								<td>@ent("<=!=>")</td>
							</tr>
							<tfoot>
								<tr>
									<th>code</th>
									<th>output</th>
									<th>rendered</th>
								</tr>
							</tfoot>
						</table>
					</center>
				</p>

				<h4 id="css-files">
					Including css files
				</h4>
				<p>
					The best way to add CSS files is:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint lang-js inline">
<link rel='stylesheet' type='text/css' href='\@pathtofile(path-to-css-file)'>
</pre>
</div>
					Note that by using <mono>\@pathtofile</mono> you will get a build error if the file does not exist (anymore). 
				</p>

				<p>
					Alternatively you can include a css file using <mono>\@cssinclude(path-to-css-file)</mono>, where <mono>path-to-css-file</mono> is the path from the main project directory to the css file (<u>not</u> the path from the page/output file to the css file). When building a page/output file, <mono>Nift</mono> will replace <mono>\@cssinclude(path-to-css-file)</mono> with:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint lang-js inline">
<link rel='stylesheet' type='text/css' href='path-from-page-to-css-file'>
</pre>
</div>
				</p>

				<h4 id="img-files">
					Including img files
				</h4>
				<p>
					The best way to add an images to a website page is:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint lang-js inline">
<img src="\@pathtofile(path-to-img-file)" width="120">
</pre>
</div>
					Note that by using <mono>\@pathtofile</mono> you will get a build error if the file does not exist (anymore). 
				</p>

				<p>
					Alternatively, you can include an image file using <mono>\@imginclude(path-to-img-file)</mono>, where <mono>path-to-img-file</mono> is the path from the main project directory to the img file (<u>not</u> the path from the page/output file to the img file). When building a page/output file, <mono>Nift</mono> will replace <mono>\@imginclude(path-to-img-file)</mono> with the following:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint lang-js inline">
<img src="path-from-page-to-img-file">
</pre>
</div>
				</p>

				<h4 id="js-files">
					Including javascript files
				</h4>
				<p>
					The best way to add a javscript file is:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint lang-js inline">
<script src="\@pathtofile(path-to-js-file)"></script>
</pre>
</div>
					Note that by using <mono>\@pathtofile</mono> you will get a build error if the file does not exist (anymore). 
				</p>

				<p>
					Alternatively, you can include a javascript file using <mono>\@jsinclude(path-to-js-file)</mono>, where <mono>path-to-js-file</mono> is the path from the main project directory to the js file (<u>not</u> the path from the page/output file to the js file). When building a page/output file, <mono>Nift</mono> will replace <mono>\@jsinclude(path-to-js-file)</mono> with: 

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint lang-js inline">
<script src="path-from-page-to-js-file"></script>
</pre>
</div>
				</p>

				<h4 id="favicon-file">
					Including a favicon file
				</h4>
				<p>
					The best way to add a favicon file is:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint lang-js inline">
<link rel='icon' type='image/png' href='\@pathtofile(path-to-favicon-file)'>
</pre>
</div>
					Note that by using <mono>\@pathtofile</mono> you will get a build error if the file does not exist (anymore). 
				</p>

				<p>
					Alternatively, you can include a favicon file using <mono>\@faviconinclude(path-to-favicon-file)</mono>, where <mono>path-to-favicon-file</mono> is the path from the main project directory to the favicon file (<u>not</u> the path from the page/output file to the favicon file). When building a page/output file, <mono>Nift</mono> will replace <mono>\@faviconinclude(path-to-favicon-file)</mono> with:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint lang-js inline">
<link rel='icon' type='image/png' href='path-from-page-to-favicon-file'>
</pre>
</div>
				</p>

				<p>
					An example of using <mono>\@cssinclude(path-to-css-file)</mono>, <mono>\@jsinclude(path-to-js-file)</mono> and <mono>\@faviconinclude(path-to-favicon-file)</mono> is given below (I typically put these in a <mono>head.content</mono> file located in the <mono>template</mono> directory and included in the <mono>template/page.template</mono> file in between the <mono>@\<head>@\</head></mono> tags):

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline">
\@cssinclude("site/css/pagestyle.css")
\@jsinclude("site/js/motion.css")
\@faviconinclude("site/files/favicon.ico")
</pre>
</div>
				</p>
			</div>
		</section>
	</div>
</section>
