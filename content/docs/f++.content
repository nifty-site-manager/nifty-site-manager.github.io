<!-- Main -->
<section id="main" class="wrapper style2">
	<div class="title"><mnstr style="font-size:16px">f++</mnstr></div>
	<div class="container">
		<!-- Features -->
		<section id="features">
			<header class="style1">
				<h2 style="margin-bottom: 100px">
					Nift's in-built scripting language
				</h2>

				<noselect> 
						<h2>
							<mnstr style = "font-size:9vw">FUNCTIONSTEIN</mnstr>
						</h2>
				</noselect>
			</header>

			<!--<noselect> 
					<center>
						<h2>
							<overthehedge style = "font-size:24px">Nick Ham's World Take Over Attempt</overthehedge>
						</h2>
					</center>
			</noselect>-->

			<!-- Image -->
			<center>
				<#-- https://icon-library.com/png/921451.html --#>
				<img src="@pathtofile(site/images/reaper.png)" alt="Functionstein reaper mascot" width="350px" style="max-width:90%; border-radius:20px; margin-bottom: 60px">
			</center>

			<div class="content">
				<p>
					Nift has its own in-built scripting language <mnstr style="font-size:16px">FUNCTIONSTEIN</mnstr>, or either <mnstr style="font-size:16px">FNSTEIN</mnstr> or <mnstr style="font-size:16px">f++</mnstr>. The <mono>++</mono> comes from the language being developed in <mono>c++</mono>, while the <mono>f</mono> comes from functions with superpowers playing a central role nearly almost everywhere in the language.
				</p>

				<a href="#contents" class="to_top">[contents]</a>

				<h4 id="contents">
					Contents
				</h4>
				<div style="text-indent:30px; margin-top:10px">
					<ul>
						<li><a href="#interpreter">f++ interpreter</a></li>
						<li><a href="#shell">f++ shell</a></li>
						<li><a href="#automatic-flashell-startup">Automatic <zapfont style = "font-size:36px;">FLASHELL</zapfont> startup</a></li>
						<li><a href="#scripts">Running f++ scripts</a></li>
						<li><a href="#f++-from-n++">f++ from n++</a></li>
						<li><a href="#nift-fns">functions</a></li>
						<li><a href="#examples">examples</a></li>
					</ul>
				</div>

				<h4 id="interpreter">
					<mnstr style="font-size:16px">f++</mnstr> interpreter
				</h4>
				<p>
					<mono>Nift</mono> has an <mnstr style="font-size:16px">f++</mnstr> interpreter that you can start with either <mono>nsm interp</mono> or <mono>nift interp</mono> (it is the default language for the interpeter mode). See the <a href="@pathto(docs/REPL)">interactive REPL</a> page for docs.
				</p>

				<p>
					In the interpreter mode the prompt will just tell you which language you are using. If you would like the prompt to also display the present working directory (up to using half the width of the console) you can switch to the shell mode using <mono>nsm_mode("sh")</mono>. You can switch back again with <mono>nsm_mode("interp")</mono>.
				</p>

				<p>
					You can switch to one of the other languages available in Nift's interpreter using <mono>nsm_lang(langStr)</mono> where <mono>langStr</mono> is one of <mnstr style="font-size:16px">f++</mnstr>, <mnstr style="font-size:16px">N++</mnstr>, <mono>lua</mono> or <mono>exprtk</mono>.
				</p>

				<h4 id="shell">
					<zapfont style = "font-size:36px;">FLASHELL</zapfont> - <mnstr style="font-size:16px">f++</mnstr> shell
				</h4>
				<p>
					<mono>Nift</mono> has an <mnstr style="font-size:16px">f++</mnstr> shell that you can start with either <mono>nsm sh</mono> or <mono>nift sh</mono> (it is the default language for the shell mode). See the <a href="@pathto(docs/REPL)">interactive REPL</a> page for docs.
				</p>

				<p>
					In the shell mode the prompt will tell you which language you are using and the present working directory (up to using half the width of the console). If you would like the prompt to just display the language you can switch to the interpreter mode using <mono>nsm_mode("interp")</mono>. You can switch back again with <mono>nsm_mode("sh")</mono>.
				</p>

				<p>
					You can switch to one of the other languages available in Nift using <mono>nsm_lang(langStr)</mono> where <mono>langStr</mono> is one of <mnstr style="font-size:16px">f++</mnstr>, <mnstr style="font-size:16px">N++</mnstr>, <mono>lua</mono> or <mono>exprtk</mono>.
				</p>


				<h4 id="scripts">
					Running f++ scripts
				</h4>
				<p>
					If you have an <mnstr style="font-size:16px">f++</mnstr> script saved in a file <mono>path/script-name.f</mono> you can run it with either of the following:
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline lang-nift">
nsm run path/script-name.f
nift run path/script-name.f
</pre>
</div>
				</p>

				<p>
					If the script has a different extension, say <mono>.ext</mono>, you can run the script with either of the following:
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline lang-nift">
nsm run -f++ path/script-name.ext
nift run -f++ path/script-name.ext
</pre>
</div>
				</p>

				<p>
					If you want to run a normal file, eg. <mono>script.f</mono>, as a script then use something typical like the following as a shebang:
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline">
#!/usr/bin/env nift
</pre>
</div>
				</p>

				<p>
					There's information about "run commands" scripts, eg. <mono>niftrc.f</mono> available on the <a href="@pathto('docs/REPL')#rc">REPL</a> page.
				</p>

				<h4 id="automatic-flashell-startup">
					Automatic <zapfont style = "font-size:36px;">FLASHELL</zapfont> startup
				</h4>
				<p>
					On Unix based platforms (eg. probably all posix compliant Linux distributions, OSX, FreeBSD, Gentoo etc.), you can create an application launcher with <mono>x-terminal-emulator -e nift sh</mono> or <mono>gnome-terminal -- nift sh</mono> as the short-cut command, which will open a terminal session running <zapfont style = "font-size:36px;">FLASHELL</zapfont> and close when <zapfont style = "font-size:36px;">FLASHELL</zapfont> is exited. 
				</p>

				<p>
					From <mono>gnome-session-flashback</mono> I am able to create an application launcher from the gui by doing <mono>alt</mono> and right click in some free space on the top or bottom panel and selecting <mono>Add to Panel...</mono>. Alternatively create a file titled something like <mono>Terminal.desktop</mono> below and give exec permissions (calling the application <mono>Terminal</mono> gives a more native feel as it is going to be hijacked and renamed otherwise):
<div align="center" style="margin-top:30px; margin-bottom:10px">
<pre class="prettyprint inline">
#!/usr/bin/env xdg-open

[Desktop Entry]
Version=1.0
Type=Application
Terminal=true
Exec=x-terminal-emulator -e nift sh
Name=Terminal
Comment=flashell shortcut
Icon=<path-to-icon>
</pre>
</div>
				</p>

				<p>
					I often find it easier to just use the properties of the file through the gui to acccess the filesystem for linking to the icon file, typically from the desktop. Below is an icon people might like to use with their short-cut(s): <br>

					<center>
						<img src="@pathtofile(site/images/flash-icon.png)" alt="flash icon" width="100px" style="max-width:90%;">
					</center>
				</p>

				<p>
					If you prefer a more native feel without the icon being hijacked, the default icon used for <mono>gnome-terminal</mono> on <mono>gnome-session-flashback</mono>, at least on <mono>Ubuntu</mono>, is below:

					<center>
						<img src="@pathtofile(site/images/terminal-icon.svg)" alt="gnome-terminal icon" width="100px" style="max-width:90%;">
					</center>
				</p>

				<p>
					and the default icon, or at least one similar to it, used for <mono>cmd.exe</mono> on <mono>Windows 10</mono> is below:

					<center>
						<img src="@pathtofile(site/images/win-cmd-icon.png)" alt="Windows cmd.exe icon" width="100px" style="max-width:90%;">
					</center>
				</p>

				<p>
					You can start a session of for example bash shell by simply typing <mono>bash</mono> from <zapfont style = "font-size:36px;">FLASHELL</zapfont>, which will also do <mono>lolcat</mono> output through bash if you have <mono>lolcat</mono> activated (which actually quite surprises me), however if you start another <mono>Nift</mono> shell or interpreter with <mono>lolcat</mono> activated the prompt line including user input stays invisible until you hit enter (just type <mono>exit</mono> if you accidentally do this).
				</p>

				<p>
					On Windows one approach is to create a shortcut to <mono>cmd.exe</mono> to the command that is executed when the shortcut is opened and add <mono>/k nift sh</mono> to the end of the target under properties for the shortcut (or the powershell executeable if you would prefer adding <mono>-Command nift sh</mono> to the end of the target under properties for the duplicated powershell shortcut).
				</p>

				<h4 id="f++-from-n++">
					<mnstr style="font-size:16px">f++</mnstr> from <mnstr style="font-size:16px">N++</mnstr>
				</h4>
				<p>
					You can run <mnstr style="font-size:16px">f++</mnstr> code from <mnstr style="font-size:16px">N++</mnstr> using either of the following:					

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline lang-nift">
\@f++(/* single line of f++ code */)
</pre>
</div>
				</p>

				<p>
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline lang-nift">\@f++
{
	// block of f++ code
}
</pre>
</div>
				</p>

				<h4 id="nift-fns">
					Nift functions
				</h4>
				<p>
					All of Nift's <a href="@pathtopage(docs/fns)">hard-coded functions</a> (including functions for defining variables, functions and structs) are available in your <mnstr style="font-size:16px">f++</mnstr> code. The syntax for calling a function is as follows:
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="prettyprint inline lang-nift">
funcName{options}(params)
</pre>
</div>
				</p>

				<h4 id="examples">
					Examples
				</h4>
				<p>
					There are some basic solutions to Project Euler problems available <a href="https://github.com/nifty-site-manager/project-euler">here</a>.
				</p>

				<p>
					The following script will create and delete 100k files on your machine:
<div align="center" style="margin-bottom:10px">
<pre class="prettyprint inline lang-nift">
#!/usr/bin/env nift
string params = "file0.txt";
 
for(int i=1; i<100000; i+=1) 
    \$`params += ', file\$[i].txt'`;
 
poke(\$[params]);
rmv(\$[params]);
</pre>
</div>
				</p>

				<p>
					The following script uses more <mono>ExprTk</mono> than above and runs faster:
<div align="center" style="margin-bottom:10px">
<pre class="prettyprint inline lang-nift">
#!/usr/bin/env nift
string params = "file0.txt";
int i;

exprtk
{
	for(i:=1; i<100000; i+=1) 
	{
	    params += ', file' + nsm_tostring('i') + '.txt';
	}
}
 
poke(\$[params]);
rmv(\$[params]);
</pre>
</div>
				</p>

				<p>
					<b>Note:</b> do not leave the directory you are running the script from open on your machine, run it from a terminal. The following bash script will do the same but much slower, feel free to provide a similar windows script in powershell or a batch file:
<div align="center" style="margin-top:30px; margin-bottom:10px">
<pre class="prettyprint inline">
#!/usr/bin/env bash
COUNTER=0
while [  $COUNTER -lt 100000 ]; do
    let COUNTER=COUNTER+1 
 
    touch file${COUNTER}.txt
    rm file${COUNTER}.txt
done
</pre>
</div>
				</p><br><br><br><br><br>

				<center>
					<div>
						<noselect><mnstr style = "font-size:20vw">}</mnstr></noselect>
					</div>
				</center>
			</div>
		</section>
	</div>
</section>
