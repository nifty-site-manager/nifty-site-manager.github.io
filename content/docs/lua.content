<!-- Main -->
<section id="main" class="wrapper style2">
	<div class="title">Lua</div>
	<div class="container">
		<!-- Features -->
		<section id="features">
			<header class="style1">
				<h2>Embedded LuaJIT</h2>
			</header>

			<!-- Image -->
			<center>
				<img src="@pathtofile(site/images/lua.png)" alt="Lua logo" width=128 style="margin-bottom:40px">
			</center>

			<div class="content">
				<p>
					<a href="https://luajit.org">LuaJit</a> is a programming language which is embedded in <mono>Nift</mono>. <mono>LuaJIT</mono> is an <a href="https://github.com/r-lyeh-archived/scriptorium">extremely fast</a> version of the already fast and popular scripting language <a href="https://lua.org">Lua</a>, note that <mono>LuaJIT</mono> uses version 5.1 of <mono>Lua</mono> (<a href="https://www.lua.org/manual/5.1/index.html">reference manual</a>).
				</p>

				<p>
					There are lots of modules available for <mono>Lua</mono> that can be installed as self-contained packages called <mono>rocks</mono>. These can be installed using either <a href="https://luarocks.org">LuaRocks</a> or <a href="https://luadist.org">LuaDist</a>. There is documentation below on how to use <mono>LuaRocks</mono> with most of the operating systems that Nift runs on, for other platforms try searching Google for <mono><i>os</i> luarocks</mono>.  
				</p>

				<center>
					<img src="@pathtofile(site/images/luajit.jpg)" alt="LuaJit logo" width=300 style="margin-bottom:40px">
				</center>

				<a href="#contents" class="to_top">[contents]</a>

				<p id="contents">
					The ways in which you can use <mono>Lua</mono> with <mono>Nift</mono> are documented on this page:
					<ul style="text-indent:30px">
						<li><a href="#interpreter">Lua interpreter</a></li>
						<li><a href="#scripts">Running Lua scripts</a></li>
						<li><a href="#lua-f++">Lua from f++</a></li>
						<li><a href="#lua-n++">Lua from n++</a></li>
						<li><a href="#nift-fns">Nift functions</a></li>
						<li><a href="#luarocks">LuaRocks</a></li>
						<li><a href="#moonscript-fns">Moonscript functions</a></li>
					</ul>
				</p>

				<h4 id="interpreter">
					Lua interpreter
				</h4>
				<p>
					<mono>Nift</mono> has a <mono>Lua</mono> interpreter that you can start with either <mono>nsm interp -lua</mono> or <mono>nift interp -lua</mono>.
				</p>

				<p>
					In Nift's interpreter mode the prompt will just tell you which language you are using. If you would like the prompt to also display the present working directory (up to using half the width of the console) you can switch modes to the shell mode using <mono>nsm_mode("sh")</mono>. You can switch back again with <mono>nsm_mode("interp")</mono>.
				</p>

				<p>
					You can switch to one of the other languages available in Nift's interpreter using <mono>nsm_lang(langStr)</mono> where <mono>langStr</mono> is one of <mono>f++</mono>, <mono>n++</mono>, <mono>lua</mono> or <mono>exprtk</mono>.
				</p>


				<h4 id="scripts">
					Running Lua scripts
				</h4>
				<p>
					If you have a Lua script saved in a file <mono>path/script-name.lua</mono> you can run it with either <mono>nsm run -lua path/script-name.lua</mono> or <mono>nift run -lua path/script-name.lua</mono>.
				</p>

				<h4 id="lua-f++">
					Lua from f++
				</h4>
				<p>
					You can run <mono>Lua</mono> code from <mono>f++</mono> using either of the following:					

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline"><code data-language="lua">lua(-- single line of Lua code)
</code></pre>
</div>
				</p>

				<p>
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline"><code data-language="lua">lua
{
	-- block of Lua code
}
</code></pre>
</div>
				</p>

				<h4 id="lua-n++">
					Lua from n++
				</h4>
				<p>
					You can run <mono>Lua</mono> code from <mono>f++</mono> using either of the following:					

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline"><code data-language="lua">\@lua(-- single line of Lua code)
</code></pre>
</div>
				</p>

				<p>
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline"><code data-language="lua">\@lua
{
	-- block of Lua code
}
</code></pre>
</div>
				</p>

				<h4 id="nift-fns">
					Nift functions
				</h4>
				<p>
					The following functions specific to Nift may be made available inside your Lua code. When using the interpreter or running a script these functions will be added for you, if you want to use them for Lua code inside f++ first call <mono>lua_addnsmfns()</mono>, similarly for inside n++ first call <mono>\@lua_addnsmfns()</mono>. 

					<center class="table">
						<table id="lua_nift_fns_table" class="alt">
							<thead>
								<tr>
									<th>syntax</th>
									<th>example</th>
									<th>about</th>
								</tr>
							</thead>
							<tr>
								<td><mono>nsm_write(output, params)</mono></td>
								<td><mono>nsm_write(console, "x: ", x, endl)</td>
								<td>write to console, output file (ofile), or a stream</td>
							</tr>
							<tr>
								<td><mono>nsm_tonumber(string varName)</mono></td>
								<td><mono>nsm_tonumber("i")</td>
								<td>get number from Nift variable</td>
							</tr>
							<tr>
								<td><mono>nsm_tostring(string varName)</mono></td>
								<td><mono>nsm_tostring("str")</td>
								<td>get string from Nift variable</td>
							</tr>
							<tr>
								<td><mono>nsm_tolightuserdata(string varName)</mono></td>
								<td><mono>nsm_tolightuserdata("x")</td>
								<td>get pointer to Nift variable</td>
							</tr>
							<tr>
								<td><mono>nsm_setnumber(string / lightuserdata varName, number value)</mono></td>
								<td><mono>nsm_setnumber("i", 0)</td>
								<td>set number variable</td>
							</tr>
							<tr>
								<td><mono>nsm_setstring(string / lightuserdata varName, string value)</mono></td>
								<td><mono>nsm_setstring("str", "hello!")</td>
								<td>set string variable</td>
							</tr>
							<tfoot>
								<tr>
									<th>syntax</th>
									<th>example</th>
									<th>about</th>
								</tr>
							</tfoot>
						</table>
					</center>
				</p>

				<h4 id="luarocks">
					LuaRocks
				</h4>
				<p>
					As mentioned above, <a href="https://luarocks.org">LuaRocks</a> may be used to install all sorts of modules for Lua. There is information below about installing LuaRocks on different platforms. 
				</p>

				<p>
					<b>Note:</b> Some rocks are to interface with other programs that you also need to have installed on your machine, for example <a href="https://luarocks.org/modules/tomasguisasola/luasql-mysql">LuaSQL-MySQL</a> expects you to have MYSQL installed on your machine with the header <mono>mysql.h</mono> available somewhere in your PATH variable. Similarly <a href="https://luarocks.org/modules/dougcurrie/lsqlite3">lsqlite3</a> expects you to have SQLITE installed on your machine with the header <mono>sqlite3.h</mono> available somewhere in your PATH variable.
				</p>

				<p>
					Some of the rocks you might find useful with Nift are:
					<ul>
						<li><a href="https://luarocks.org/modules/leafo/cloud_storage">cloud_storage</a> - access Google Cloud Storage from Lua</li>
						<li><a href="https://luarocks.org/modules/moteus/lua-curl">Lua-cURL</a> - binding to libcurl (<a href="http://lua-curl.github.io/">official website</a>, <a href="https://github.com/Lua-cURL/Lua-cURLv3">GitHub</a>)</li>
						<li><a href="https://luarocks.org/modules/luarocks/lua-discount">lua-discount</a> - binding to a <b>fast</b> C implementation of the Markdown text-to-html markup system (<a href="http://asbradbury.org/projects/lua-discount/">official website</a>)</li>
						<li><a href="https://luarocks.org/modules/leafo/etlua">etlua</a> - allows you to render ERB style templates but with Lua. Supports <% %>, <%=%> and <%- %> tags (with optional newline slurping) for embedding code</li>
						<li><a href="https://luarocks.org/modules/openresty/lua-cjson">lua-cjson</a> - fast JSON encoding/parsing support</li>
						<li><a href="https://luarocks.org/modules/x25/luajwt">luajwt</a> - JSON Web Tokens for Lua, very fast and compatible with pyjwt, php-jwt and ruby-jwt</li>
						<li><a href="https://luarocks.org/modules/hisham/graphql">graphql</a> - Lua GraphQL implementation (<a href="https://github.com/bjornbytes/graphql-lua">GitHub</a>)</li>
						<li><a href="https://luarocks.org/modules/luarocks/luahaml">luahaml</a> - implementation of the Haml markup language for Lua</li>
						<li><a href="https://luarocks.org/modules/daurnimator/http">http</a> - HTTP library for Lua: optionally asynchronous (including DNS lookups and TLS), supports HTTP(S) version 1.0, 1.1 and 2, functionality for both client and server, cookie Management, websockets</li>
						<li><a href="https://luarocks.org/modules/olivine-labs/lustache">lustache</a> - allows you to use the Mustache templating standard in Lua by passing in a string, data, and partial templates. It precompiles and caches templates for speed, and allows you to build complex strings such as html pages by iterating through a table and inserting values (<a href="http://olivinelabs.com/lustache/">official website</a>)</li>
						<li><a href="https://luarocks.org/modules/leafo/mailgun">mailgun</a> - send email with Mailgun</li>
						<li><a href="https://luarocks.org/modules/mpeterv/markdown">Markdown</a> - pure-lua implementation of the Markdown text-to-html markup system</li>
						<li><a href="https://luarocks.org/modules/leafo/magick">magick</a> - bindings to ImageMagick for LuaJIT using FFI</li>
						<li><a href="https://luarocks.org/modules/leafo/moonscript">moonscript</a> - programmer friendly language that compiles to Lua (<a href="http://moonscript.org/">official website</a>)</li>
						<li><a href="https://luarocks.org/modules/tomasguisasola/luasql-mysql">LuaSQL-MySQL</a> - database connectivity for Lua (MySQL driver), enables a Lua program to connect to databases, execute arbitrary SQL statements and retrieve results in a row-by-row cursor fashion</li>
						<li><a href="https://luarocks.org/modules/dougcurrie/lsqlite3">lsqlite3</a> - a binding for Lua to the SQLite3 database library</li>
						<li><a href="https://luarocks.org/modules/tomasguisasola/luasql-sqlite3">LuaSQL-SQLite3</a> - database connectivity for Lua (SQLite3 driver), enables a Lua program to connect to databases, execute arbitrary SQL statements and retrieve results in a row-by-row cursor fashion</li>
						<li><a href="https://luarocks.org/modules/luarocks/nixio">nixio</a> - a multi-platform library offering a wide variety of features such as IPv4, IPv6 and UNIX networking, large file I/O, file system operations, system and process control, POSIX user/group management, basic cryptographical hashing, hmac and TLS support, bit operations and binary conversion (also see <a href="https://neopallium.github.io/nixio/modules/nixio.html">here</a>)</li>
						<li><a href="https://luarocks.org/modules/leafo/pgmoon">pgmoon</a> - PostgreSQL driver written in pure Lua for use with OpenResty's cosocket API. Can also be used in regular Lua with LuaSocket and LuaCrypto</li>
						<li><a href=""></a></li>
						<li><a href="https://luarocks.org/modules/pyericz/redux-lua">redux-lua</a> - implements redux using Lua language</li>
						<li><a href="https://luarocks.org/modules/jakeg/lua-requests">lua-requests</a> - HTTP requests made easy! Support for Basic Auth, Digest Auth. HTTP response parsing has never been easier (<a href="https://github.com/JakobGreen/lua-requests">GitHub</a>)</li>
						<li><a href="https://luarocks.org/modules/bungle/lua-resty-template">lua-resty-template</a> - templating engine (HTML) for Lua and OpenResty</li>
						<li><a href="https://luarocks.org/modules/luasocket/luasocket">LuaSocket</a> - an extension library that is composed by two parts: a C core that provides support for the TCP and UDP transport layers, and a set of Lua modules that add support for functionality commonly needed by applications that deal with the Internet</li>
						<li><a href="https://luarocks.org/modules/leafo/web_sanitize">web_sanitize</a> - library for sanitizing untrusted HTML</li>
						<li><a href="https://luarocks.org/modules/jcupitt/lua-vips">lua-vips</a> - a binding for the libvips image processing library. it is usually faster and needs less memory than similar libraries</li>
						<li><a href="https://luarocks.org/modules/hisham/luafilesystem">LuaFileSystem</a> - offers a portable way to access the
underlying directory structure and file attributes</li>
						<li><a href="https://luarocks.org/modules/moteus/lua-path">lua-path</a> - file system path manipulation library</li>
						<li><a href="https://luarocks.org/modules/benoitgermain/lanes">lanes</a> - multithreading support for Lua</li>
						<li><a href="https://luarocks.org/modules/moteus/lua-llthreads2">lua-llthreads2</a> - low-level threads for Lua, in additional module supports: thread join with zero timeout; logging thread errors with custom logger; run detached joinable threads; pass cfunctions as argument to child thread</li>
						<li><a href="https://luarocks.org/modules/olim/luasystem">luasystem</a> - platform independent system calls</li>
						<li><a href="https://luarocks.org/modules/ckobus/sys">sys</a> - provides system functionalities for <a href="http://torch.ch/">Torch</a></li>
						<li><a href="https://luarocks.org/modules/gvvaughan/lpeg">LPeg</a> - new pattern-matching library for Lua, based on Parsing
Expression Grammars (PEGs)</li>
						<li><a href="https://luarocks.org/modules/daurnimator/luaossl">luaossl</a> - most comprehensive OpenSSL module in the Luaverse</li>
						<li><a href="https://luarocks.org/modules/starius/luacrypto">LuaCrypto</a> - frontend to the OpenSSL cryptographic library, the OpenSSL features that are currently exposed are: digests (MD5, SHA-1, HMAC, and more), encryption, decryption and crypto-grade random number generators</li>
						<li><a href="https://luarocks.org/modules/tomasguisasola/md5">MD5</a> - offers basic cryptographic facilities: a hash (digest) function, a pair crypt/decrypt based on MD5 and CFB, and a pair crypt/decrypt based on DES with 56-bit keys</li>
						<li><a href="https://luarocks.org/modules/gvvaughan/luaposix">luaposix</a> - library binding various POSIX APIs (see also <a href="http://25thandclement.com/~william/projects/lunix.html">lunix</a>)</li>
						<li><a href="https://luarocks.org/modules/gaspard/xml">xml</a> - fast xml parser based on RapidXML</li>
						<li><a href="https://luarocks.org/modules/gvvaughan/lyaml">lyaml</a> - libYAML binding for Lua, read and write YAML format files with Lua</li>
						<li><a href="https://luarocks.org/modules/gaspard/yaml">yaml</a> - Lua YAML serialization using LibYAML, LibYAML is generally considered to be the best C YAML 1.1 implementation</li>
					</ul>
				</p>

				<p>
					Other Lua resources worth checking out include:
					<ul>
						<li><a href="https://fengari.io/">Fengari</a> - the Lua VM written in JavaScript, it uses JavaScript's garbage collector so that interoperability with the DOM is non-leaky (<a href="https://github.com/fengari-lua/fengari">GitHub</a>)</li>
						<li><a href="https://luajit.org/ext_ffi.html">FFI Library</a> - allows calling external C functions and using C data structures from pure Lua code</li>
						<li><a href="https://libgit2.org/">libgit2</a> - portable, pure C implementation of the Git core methods provided as a re-entrant linkable library with a solid API, allowing you to write native speed custom Git applications in any language which supports C bindings (<a href="https://github.com/libgit2/luagit2">luagit2</a> - Lua bindings for libgit2)</li>
						<li><a href="https://scilua.org/">SciLua</a> - Scientific computing with LuaJIT</li>
						<li><a href="http://torch.ch/">Torch</a> - a scientific computing framework with wide support for machine learning algorithms that puts GPUs first</li>
					</ul>
				</p>

				<p>
					You can also compile the following languages to Lua (see <a href="https://github.com/hengestone/lua-languages">here</a> for a longer list):
					<ul>
						<li><a href="https://amulet.works/">Amulet</a> - simple, functional programming language in the ML tradition</li>
						<li><a href="https://github.com/yanghuan/CSharp.lua">CSharp.lua</a> - C# to Lua compiler</li>
						<li><a href="https://fennel-lang.org/">Fennel</a> - a programming language that brings together the speed, simplicity, and reach of Lua with the flexibility of a lisp syntax and macro system</li>
						<li><a href="https://haxe.org/">Haxe</a> - an open source high-level strictly-typed programming language with a fast optimizing cross-compiler</li>
						<li><a href="https://moonscript.org/">MoonScript</a> - a dynamic scripting language that compiles into Lua</li>
						<li><a href="https://github.com/TypeScriptToLua/TypeScriptToLua">TypeScriptToLua</a> - generic TypeScript to Lua transpiler. Write your code in TypeScript and publish Lua!</li>
						<li><a href="https://urn-lang.com/">Urn</a> - a Lisp dialect with a focus on minimalism</li>
					</ul>
				</p>

				<h5>
					LuaRocks on Linux
				</h5>
				<p>
					LuaRocks can typically be installed through the package manager for your distribution. For example on Ubuntu you can run:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline">
sudo apt-get install luarocks
</pre>
</div>
				</p>

				<p>
					You should then be able to install rocks using for example:
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline">
sudo luarocks install LuaFileSystem
</pre>
</div>
				</p>

				<p>
					Once LuaRocks is installed run <mono>luarocks path --bin</mono> and add the lines for <mono>LUA_PATH</mono> and <mono>LUA_CPATH</mono> to the end of <mono>~/.bashrc</mono> (I find you typically do not need to add the value given for <mono>PATH</mono> to your path variable).
				</p>

				<p>
					LuaRocks should work fine with Nift installed from source or through Snapcraft, I have not had much luck yet getting it to work with installs through Flatpak however.
				</p>

				<h5>
					LuaRocks on OSX
				</h5>

				<p>
					The easiest way to install LuaRocks on OSX is to use homebrew with: 
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline">
brew install luarocks
</pre>
</div>
				</p>


				<p>
					Note however that this typically sets LuaRocks up for Lua v5.3 by default, whereas for LuaJIT we want it to install rocks for v5.1, it will tell you which version is configured near the bottom of the output from calling <mono>luarocks</mono> from the command line. When it is configured for Lua v5.3, when installing a rock you will need to add <mono>--lua-version=5.1</mono>, for example:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline">
luarocks install moonscript --lua-version=5.1
</pre>
</div>
				</p>

				<p>
					Once LuaRocks is installed run <mono>luarocks path --bin</mono> and add the lines for <mono>LUA_PATH</mono> and <mono>LUA_CPATH</mono> to the end of <mono>~/.bash_profile</mono> (I find you typically do not need to add the value given for <mono>PATH</mono> to your path variable).
				</p>

				<p>
					Alternatively, assuming you have command line tools installed for XCode, you can download the latest <mono>.tar.gz</mono> version of the source for LuaRocks from <a href="https://luarocks.github.io/luarocks/releases/">here</a>. Extract the contents of the archive, open the directory in a terminal window and run:
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline">
./configure --lua-version=5.1
make
sudo make install
</pre>
</div>
				</p>

				<p>
					Then you can install rocks using for example:
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline">
sudo luarocks install lua-cjson
</pre>
</div>
				</p>

				<p>
					Same as above, once LuaRocks is installed run <mono>luarocks path --bin</mono> and add the lines for <mono>LUA_PATH</mono> and <mono>LUA_CPATH</mono> to the end of <mono>~/.bash_profile</mono> (I find you typically do not need to add the value given for <mono>PATH</mono> to your path variable).
				</p>

				<p>
					LuaRocks should work fine with Nift installed from source or through Homebrew.
				</p>

				<h5>
					LuaRocks on Windows
				</h5>
				<p>
					LuaRocks can be installed through Chocolatey with:

<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline">
choco install luarocks
</pre>
</div>

					Note however that Chocolatey installs of LuaRocks expect you to have Visual Studio Code installed with its build tools for C++, which can take up quite a lot of disk space. 
				</p>

				<p>
					You can supposedly also install LuaRocks to use MingW for building rocks, see <a href="https://github.com/luarocks/luarocks/wiki/Installation-instructions-for-Windows">here</a> for instructions. Note that when running the install script, use:
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline">
INSTALL.BAT /MW /LV 5.1
</pre>
</div>
				</p>

				<p>
					You should then be able to install rocks using for example:
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline">
sudo luarocks install LuaFileSystem
</pre>
</div>
				</p>

				<p>
					Once LuaRocks is installed run <mono>luarocks path --bin</mono> and add the values for <mono>LUA_PATH</mono> and <mono>LUA_CPATH</mono> as environemnt variables on your machine (I find you typically do not need to add the value given for <mono>PATH</mono> to your path variable). To modify environment variables in Windows 10 you can type <mono>environment variables</mono> in to <mono>Cortana</mono> who should then give you a link straight to where you need to go in Control Panel. 
				</p>

				<p>
					LuaRocks should work fine with Nift installed from source or through Chocolatey, though so far I have not had much luck getting LuaRocks to build rocks on Windows, I will update this page once I figure out a reliable way to install LuaRocks on Windows.
				</p>


				<h5 id="moonscript-fns">
					Moonscript functions
				</h5>
				<p>
					Suppose you have a moonscript file <mono>functions.moon</mono>:
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline"><code data-language="lua">func1 = ->
	print "hello, world!"
	
func2 = ->
	print "hello, mars!"

{ :func }
{ :func2 }
</code></pre>
</div>
				</p>

				<p>
					Inside Lua code (in a file in the same directory) you can require <mono>functions.moon</mono> and use its functions as follows:
<div align="center" style="margin-top:-30px; margin-bottom:10px">
<pre class="inline"><code data-language="lua">require "moonscript"
fns = require "functions"
fns.func()
fns.func2()
</code></pre>
</div>
				</p>
			</div>
		</section>
	</div>
</section>
