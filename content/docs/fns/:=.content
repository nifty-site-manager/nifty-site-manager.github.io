<!-- Main -->
<section id="main" class="wrapper style2">
	<div class="title">fn: <mono>:=</mono></div>
	<div class="container">
		<!-- Features -->
		<section id="features">
			<div class="content">
				<a href="#contents" class="to_top">[contents]</a>

				<h4 id="contents">
					Contents
				</h4>
				<ul style="text-indent:30px">
					<li><a href="#syntax">Syntax</a></li>
					<li><a href="#description">Description</a></li>
					<li><a href="#options">Options</a></li>
					<li><a href="#f++-eg">f++ example</a></li>
					<li><a href="#n++-eg">n++ example</a></li>
				</ul>

				<h4 id="syntax">
					Syntax
				</h4>
				<p>
					The syntax for <mono>:=</mono> calls is:
<div align="center" style="margin-top:-15px; margin-bottom:50px">
<mono>f++</mono>: &nbsp; <pre class="prettyprint inline lang-nift" style="margin-bottom:-40px">
type definitions
type(definitions)
:=(type, definitions)
</pre>
</div><br>
<div align="center" style="margin-top:-15px; margin-bottom:50px">
<mono>n++</mono>: &nbsp; <pre class="prettyprint inline lang-nift" style="margin-bottom:-40px">
\@type definitions
\@type(definitions)
\@:=(type, definitions)
</pre>
</div>
				</p>

				<p>
					<b>Note:</b> If you are using the first syntax for variable definitions and want to have more code and/or text following on the same line then simply end the definition with '<mono>;</mono>'.
				</p>

				<h4 id="description">
					Description
				</h4>
				<p>
					The <mono>:=</mono> function is used for defining variables, the first parameter specifies the type of variables being defined, the remainder of the parameters should be variable definitions.
				</p>

				<p>
					<b>Note:</b> If you need to define thousands of variables then <mono>:=</mono> is faster, plus it has useful error messages for unrecognised types.
				</p>

				<p>
					<b>Note:</b> <mono>Nift</mono> will skip to the first non-whitespace (ie. to the first character that is not a space, tab or newline) after a definition and inject it to the output file where the definition started. If you want to prevent <mono>Nift</mono> from doing this put a '<mono>!</mono>' after the definition, eg.:
<div align="center" style="margin-top:-10px; margin-bottom:10px">
<pre class="prettyprint inline lang-nift">
\@:=(int, x=10)!
@int x=10;!
</pre>
</div>
				</p>

				<h4 id="options">
					Options
				</h4>
				<p>
					The following options are available for <mono>:=</mono> calls:

					<center class="table">
						<table id=":=_options_table" class="alt">
							<thead>
								<tr>
									<th>option</th>
									<th>description</th>
								</tr>
							</thead>
							<tr>
								<td><mono>const</mono></td>
								<td>definition of a <mono>constant</mono></td>
							</tr>
							<tr>
								<td><mono>!exprtk</mono></td>
								<td>do not register variable with <mono>ExprTk</mono></td>
							</tr>
							<tr>
								<td><mono>layer="x"</mono></td>
								<td>define variable at layer <mono>x</mono></td>
							</tr>
							<tr>
								<td><mono>mf</mono></td>
								<td>add member functions for variables</td>
							</tr>
							<tr>
								<td><mono>!mf</mono></td>
								<td>do not add member functions for variables</td>
							</tr>
							<tr>
								<td><mono>private</mono></td>
								<td>definition of a <mono>private</mono></td>
							</tr>
							<tr>
								<td><mono>scope+="x"</mono></td>
								<td>add <mono>x</mono> to scopes variable can be accessed from</td>
							</tr>
							<tr>
								<td><mono>...</mono></td>
								<td>parameters specify values for std::vector definition</td>
							</tr>
							<tfoot>
								<tr>
									<th>option</th>
									<th>description</th>
								</tr>
							</tfoot>
						</table>
					</center>
				</p>

				<h4 id="f++-eg">
					f++ example
				</h4>
				<p>
					Examples of <mono>:=</mono> being used with <mono>f++</mono>:					

<div align="center" style="margin-top:-10px; margin-bottom:10px">
<pre class="prettyprint inline linenums lang-nift">
int a=10, b=12; double d=3.14
string(str="hello, world!")
:=(ofstream, ofs("output.txt"))
write(ofs, a, " ", b, " ", d, endl)
write(ofs, str, endl)
ofs.close()</pre>
</div>
				</p>

				<h4 id="n++-eg">
					n++ example
				</h4>
				<p>
					Examples of <mono>:=</mono> being used with <mono>n++</mono>:					

<div align="center" style="margin-top:-10px; margin-bottom:10px">
<pre class="prettyprint inline linenums lang-nift">
\@int a=10, b=12; \@double d=3.14
\@string(str="hello, world!")
\@:=(ofstream, ofs("output.txt"))
\@write(ofs, a, " ", b, " ", d, endl)
\@write(ofs, str, endl)
\@ofs.close()</pre>
</div>
				</p>
			</div>
		</section>
	</div>
</section>
