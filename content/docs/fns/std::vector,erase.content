<!-- Main -->
<section id="main" class="wrapper style2">
	<div class="title" style="overflow: hidden; padding-left: 10px; padding-right: 10px"><p style="overflow-x: auto;">fn:&nbsp;<mono>std::vector.erase</mono></p></div>
	<div class="container">
		<!-- Features -->
		<section id="features">
			<div class="content">
				<a href="#contents" class="to_top">[contents]</a>

				<h4 id="contents">
					Contents
				</h4>
				<ul style="text-indent:30px">
					<li><a href="#syntax">Syntax</a></li>
					<li><a href="#description">Description</a></li>
					<li><a href="#f++-eg">f++ example</a></li>
					<li><a href="#n++-eg">n++ example</a></li>
				</ul>

				<h4 id="syntax">
					Syntax
				</h4>
				<p>
					The syntax for <mono>std::vector.erase</mono> calls is:
<div align="center" style="margin-top:-15px; margin-bottom:60px">
<mono>f++</mono>: &nbsp; <pre class="prettyprint inline lang-nift" style="margin-bottom:-50px">
name.erase(index)
name.erase(index, index)
std::vector.erase(name, index)
std::vector.erase(name, index, index)
</pre>
</div><br>
<div align="center" style="margin-top:-15px; margin-bottom:60px">
<mono>n++</mono>: &nbsp; <pre class="prettyprint inline lang-nift" style="margin-bottom:-50px">
\@name.erase(index)
\@name.erase(index, index)
\@std::vector.erase(name, index)
\@std::vector.erase(name, index, index)
</pre>
</div>
				</p>

				<h4 id="description">
					Description
				</h4>
				<p>
					The <mono>std::vector.erase</mono> function takes:
					<ul>
						<li>two parameters with the first parameter being the name of a standard C++ vector variable and the second variable being a valid index, it erases the element at the specified index; or</li>
						<li>an optional third index parameter and erases the elements between the two specified indices.</li>
					</ul>
				</p>

				<p>
					As a member function it takes:
					<ul>
						<li>a single index parameter and erases the element at the specified index; or</li>
						<li>two index parameters and erases the elements between the two specified indices.</li>
					</ul>
				</p>

				<p>
					<b>Note:</b> For large scale projects you will find specifying the <mono>!mf</mono> option to not add member functions during definitions and using <mono>std::vector.erase</mono> is faster than using the <mono>erase</mono> member function.
				</p>

				<h4 id="f++-eg">
					f++ example
				</h4>
				<p>
					Example of <mono>std::vector.erase</mono> being used with <mono>f++</mono>:					

<div align="center" style="margin-top:-10px; margin-bottom:10px">
<pre class="prettyprint inline linenums lang-nift">
std::vector<double> v
v.push_back(2.0, 5.3, 3.26)
v.erase(1)
std::vector.erase(v, 0)
console(v.at(0))</pre>
</div>
				</p>

				<h4 id="n++-eg">
					n++ example
				</h4>
				<p>
					Example of <mono>std::vector.erase</mono> being used with <mono>n++</mono>:					

<div align="center" style="margin-top:-10px; margin-bottom:10px">
<pre class="prettyprint inline linenums lang-nift">
\@std::vector<double> v
\@v.push_back(2.0, 5.3, 3.26)
\@v.erase(1)
\@std::vector.erase(v, 0)
\@console(v.at(1))
\@console(std::vector.at(v, 2))</pre>
</div>
				</p>
			</div>
		</section>
	</div>
</section>
