<!-- Main -->
<section id="main" class="wrapper style2">
	<div class="title">fn: <mono>script</mono></div>
	<div class="container">
		<!-- Features -->
		<section id="features">
			<div class="content">
				<a href="#contents" class="to-top">[contents]</a>

				<h4 id="contents">
					Contents
				</h4>
				<ul>
					<li><a href="#syntax">Syntax</a></li>
					<li><a href="#description">Description</a></li>
					<li><a href="#options">Options</a></li>
					<li><a href="#f++-eg">f++ example</a></li>
					<li><a href="#n++-eg">n++ example</a></li>
				</ul>

				<h4 id="syntax">
					Syntax
				</h4>
				<p>
					The syntax for <mono>script</mono> calls is:
<div align="center" style="margin-top:-15px">
<mono>f++</mono>: &nbsp; <pre class="prettyprint inline lang-nift" style="margin-bottom:-15px">
script{options}(params)
</pre>
</div><br>
<div align="center">
<mono>n++</mono>: &nbsp; <pre class="prettyprint inline lang-nift" style="margin-bottom:-15px">
\@script{options}(params)
</pre>
</div>
				</p>

				<h4 id="description">
					Description
				</h4>
				<p>
					The <mono>script</mono> function is for running scripts/programs, it takes a non-zero number of parameters, the first parameter is the name or path of the script/program to run and the remaining parameters are input parameters for the script/program. 
				</p>

				<p>
					<b>Note:</b> Scripts/programs run with <mono>\@script</mono> calls are moved to the project root directory to run and have a backup copy made. If scripts/programs are so large that copying the file will take time, or you are making lots of calls which is slower at scale, you can use the <mono>!bs</mono> option to not have the script backed up, eg.: 
<div align="center">
<pre class="prettyprint inline">
\@script{!bs}('./script.py')
</pre>
</div>
				</p>

				<p>
					<b>Note:</b> If you need to have different files/threads running the same script during the build process you will either need to set the number of build threads to <mono>1</mono> or put up with having to rebuild on the occassions where Nift unsuccessfully tries to run both scripts at the same time. You can always have duplicate copies of the same script in different files and have each file/thread run a different version.
				</p>

				<p>
					<b>Note:</b> Scripts and system calls are run from the project root directory so all paths in your scripts should start from there. Also do not change directory in your scripts as it will mess up the other threads that are also building output files (this is an unfortunate limitation of C++). If you really must change directories in your scripts then you can take a reduction in build times and set the number of build threads to <mono>1</mono>, make sure to change back to the project root directory before each script ends. 
				</p>

				<p>
					<b>Note:</b> <mono>script</mono> calls do not scale very well to hundreds of thousands of calls, it is much better to combine as much as possible in to as few <mono>script</mono>/<mono>system</mono> calls as possible for very large projects (moving stuff to the pre/post build scripts is the best place, you can output stuff to file and process the files when building). For example if possible it is much faster to have a few pre-build scripts to download text from multiple urls using cURL, and/or make all the api calls, all the database queries, and work on JSON data needed and distribute the needed output in to different files to be inputted when needed. Note that file-specific build scripts have the benefit of running in parallel to each other, whereas project-wide build scripts do not.
				</p>

				<h4 id="options">
					Options
				</h4>
				<p>
					The following options are available for <mono>script</mono> calls:

					<center class="table">
						<table id="scripts_options_table" class="alt">
							<thead>
								<tr>
									<th>option</th>
									<th>description</th>
								</tr>
							</thead>
							<tr>
								<td><mono>b</mono> or <mono>block</mono></td>
								<td>call is followed by a code-block to save to the script path for running</td>
							</tr>
							<tr>
								<td><mono>pb</mono></td>
								<td>parse code-block following call before saving to script path for running</td>
							</tr>
							<tr>
								<td><mono>!bs</mono></td>
								<td>do not backup script</td>
							</tr>
							<tr>
								<td><mono>content</mono></td>
								<td>add content file path of file being built as first input parameter to script/program</td>
							</tr>
							<tr>
								<td><mono>console</mono></td>
								<td>print script output to console</td>
							</tr>
							<tr>
								<td><mono>if-exists</mono></td>
								<td>do not throw an error if the script does not exist</td>
							</tr>
							<tr>
								<td><mono>inject</mono></td>
								<td>inject in to file being built after parsing with language call is made from</td>
							</tr>
							<tr>
								<td><mono>!o</mono></td>
								<td>do not add script output to file being built</td>
							</tr>
							<tr>
								<td><mono>raw</mono></td>
								<td>inject in to file being built raw</td>
							</tr>
							<tr>
								<td><mono>!ret</mono></td>
								<td>do not return script/program return value</td>
							</tr>
							<tfoot>
								<tr>
									<th>option</th>
									<th>description</th>
								</tr>
							</tfoot>
						</table>
					</center>
				</p>

				<h4 id="f++-eg">
					f++ example
				</h4>
				<p>
					Examples of <mono>script</mono> being used with <mono>f++</mono>:					

<div align="center">
<pre class="prettyprint inline linenums lang-nift">
script("pre-build.rb")</pre>
</div>
				</p>

				<p>
<div align="center">
<pre class="prettyprint inline linenums lang-nift">
script{b}("pre-build.py")
{
	print("hello, world!")
}</pre>
</div>
				</p>

				<h4 id="n++-eg">
					n++ example
				</h4>
				<p>
					Examples of <mono>script</mono> being used with <mono>n++</mono>:					

<div align="center">
<pre class="prettyprint inline linenums lang-nift">
\@script("pre-build.rb")</pre>
</div>
				</p>

				<p>
<div align="center">
<pre class="prettyprint inline linenums lang-nift">
\@script("./script.py", "light blue", "red")</pre>
</div>
				</p>

				<p>
<div align="center">
<pre class="prettyprint inline linenums lang-nift">
\@script{b}("pre-build.py")
{
	print("hello, world!")
}</pre>
</div>
				</p>
			</div>
		</section>
	</div>
</section>
