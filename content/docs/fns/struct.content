<!-- Main -->
<section id="main" class="wrapper style2">
	<div class="title">fn: <mono>struct</mono></div>
	<div class="container">
		<!-- Features -->
		<section id="features">
			<div class="content">
				<a href="#contents" class="to-top">[contents]</a>

				<h4 id="contents">
					Contents
				</h4>
				<ul>
					<li><a href="#syntax">Syntax</a></li>
					<li><a href="#description">Description</a></li>
					<li><a href="#options">Options</a></li>
					<li><a href="#f++-eg">f++ example</a></li>
					<li><a href="#n++-eg">n++ example</a></li>
				</ul>

				<h4 id="syntax">
					Syntax
				</h4>
				<p>
					The syntax for <mono>struct</mono> definitions is:
<div align="center" style="margin-top:-15px; margin-bottom:60px">
<mono>f++</mono>: &nbsp; <pre class="prettyprint inline lang-nift" style="margin-bottom:-50px">
struct{options}(name)
{
	//struct block
}
</pre>
</div><br>
<div align="center" style="margin-top:-15px; margin-bottom:60px">
<mono>n++</mono>: &nbsp; <pre class="prettyprint inline lang-nift" style="margin-bottom:-50px">
\@struct{options}(name)
{
	//struct block
}
</pre>
</div>
				</p>

				<h4 id="description">
					Description
				</h4>
				<p>
					The <mono>struct</mono> function is for <u>user-defined structures/types</u>, it takes a single parameter specifying a structure/type name and is followed by a block of code to be run whenever an object of that type is defined.
				</p>

				<p>
					<b>Note:</b> <mono>Nift</mono> will skip to the first non-whitespace (ie. to the first character that is not a space, tab or newline) after a <mono>struct</mono> definition and inject it to the output file where the definition started. If you want to prevent <mono>Nift</mono> from doing this put a '<mono>!</mono>' after the definition, eg.:
<div align="center">
<pre class="prettyprint inline lang-nift">
\@struct(s)
{
	# struct block
}!
</pre>
</div>
				</p>

				<h4 id="options">
					Options
				</h4>
				<p>
					The following options are available for <mono>struct</mono> calls (more to come):

					<center class="table">
						<table id="struct_options_table" class="alt">
							<thead>
								<tr>
									<th>option</th>
									<th>description</th>
								</tr>
							</thead>
							<tr>
								<td><mono>f++</mono></td>
								<td>struct block uses <mono>f++</mono> (default)</td>
							</tr>
							<tr>
								<td><mono>n++</mono></td>
								<td>struct block uses <mono>n++</mono></td>
							</tr>
							<tr>
								<td><mono>pb</mono></td>
								<td>parse struct block at definition time</td>
							</tr>
							<tfoot>
								<tr>
									<th>option</th>
									<th>description</th>
								</tr>
							</tfoot>
						</table>
					</center>
				</p>

				<h4 id="f++-eg">
					f++ example
				</h4>
				<p>
					Examples of <mono>struct</mono> being used with <mono>f++</mono>:					

<div align="center">
<pre class="prettyprint inline linenums lang-nift">
struct(circle)
{
	if(params.size() != 2)
		error("circle: expected 2 parameters, got \$[params.size]")
	:=(int, \$[params.name].radius = params.at(0))
	:=(string, \$[params.name].colour = params.at(1))
}

:=(circle, c(2, "fluro green"))
console("radius: ", c.radius)
console("colour: ", c.colour)</pre>
</div>
				</p>

				<p>
<div align="center">
<pre class="prettyprint inline linenums lang-nift">
struct(pair)
{
	if(types.size() != 2)
		error("pair: expected 2 types, got types.size()")
	if(params.size() != 2)
		error("pair: expected 2 parameters, got params.size()")
	:=(types.at(0), \$[params.name].first = params.at(0))
	:=(types.at(1), \$[params.name].second = params.at(1))
}

:=(pair<int, string>, p(10, "hello, world!"))
console("p.first: ", p.first)
console("p.second: ", p.second)</pre>
</div>
				</p>

				<p>
<div align="center">
<pre class="prettyprint inline linenums lang-nift">
struct(vector)
	if(params.size() != 2)
		error("vector: expected 2 parameters, got ", params.size())

	int \$[params.name].size = params.at(0)

	for{!s}(int i=0; i<\$[params.name].size; i+=1; forget(i))
		"types.at(0)" \$[params.name][\$[i]](params.at(1))

	function{pb}(\$[params.name].str)
		join(\$[params.name], " ")

	function{pb}(\$[params.name].print)
		console(\$[params.name].str())

	function{pb, !s}(\$[params.name].push_back)
		"\@types.at(0)" \$[params.name][\\$[\$[params.name].size]](params.at(0))
		++(\$[params.name].size)

	function{pb}(\$[params.name].pop_back)
		--(\$[params.name].size)
		forget(\$[params.name][\\$[\$[params.name].size]])
			

vector<int> v(5, 4);

v.push_back(32);
console(v.str())
console(v.size)

v.pop_back();
console(v.str())
console(v.size)</pre>
</div>
				</p>

				<h4 id="n++-eg">
					n++ example
				</h4>
				<p>
					Examples of <mono>struct</mono> being used with <mono>n++</mono>:					

<div align="center">
<pre class="prettyprint inline linenums lang-nift">
\@struct(circle)
{
	if(params.size() != 2)
		error("circle: expected 2 parameters, got \$[params.size]")
	:=(int, \$[params.name].radius = params.at(0))
	:=(string, \$[params.name].colour = params.at(1))
}

\@:=(circle, c(2, "fluro green"))
\@console("radius: ", c.radius)
\@console("colour: ", c.colour)</pre>
</div>
				</p>

				<p>
<div align="center">
<pre class="prettyprint inline linenums lang-nift">
\@struct(pair)
{
	if(types.size() != 2)
		error("pair: expected 2 types, got types.size()")
	if(params.size() != 2)
		error("pair: expected 2 parameters, got params.size()")
	:=(types.at(0), \$[params.name].first = params.at(0))
	:=(types.at(1), \$[params.name].second = params.at(1))
}

\@:=(pair<int, string>, p(10, "hello, world!"))
\@console("p.first: ", p.first)
\@console("p.second: ", p.second)</pre>
</div>
				</p>
			</div>
		</section>
	</div>
</section>
